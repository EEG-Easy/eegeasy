{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MRI_githubcode","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMj9FbTkeIj1QOD6JSvSd0U"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"eOIWMMmkTP5Q","colab_type":"code","outputId":"e457214b-e8fb-4cdc-93c3-5da054ee35fe","executionInfo":{"status":"ok","timestamp":1582633175703,"user_tz":-540,"elapsed":26305,"user":{"displayName":"성지현","photoUrl":"","userId":"14958368266460796275"}},"colab":{"base_uri":"https://localhost:8080/","height":131}},"source":["from google.colab import drive\n","\n","drive.mount('/content/gdrive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ybdutWQZTdnV","colab_type":"code","outputId":"fcc4e78b-2774-4277-e7a9-0d2f6ff9232e","executionInfo":{"status":"ok","timestamp":1582633178103,"user_tz":-540,"elapsed":771,"user":{"displayName":"성지현","photoUrl":"","userId":"14958368266460796275"}},"colab":{"base_uri":"https://localhost:8080/","height":36}},"source":["cd /content/gdrive/My Drive/MRI"],"execution_count":2,"outputs":[{"output_type":"stream","text":["/content/gdrive/My Drive/MRI\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UYAEc79fTiZH","colab_type":"code","colab":{}},"source":["import csv\n","\n","import numpy as np\n","from sklearn import svm\n","\n","\n","def load_data(train=True, sbm_only=False, fnc_only=False):\n","    if train:\n","        fnc = \"train_FNC.csv\"\n","        sbm = \"train_SBM.csv\"\n","    else:\n","        fnc = \"test_FNC.csv\"\n","        sbm = \"test_SBM.csv\"\n","\n","    with open(fnc, 'r') as f:\n","        train_fnc = list(csv.reader(f))\n","    fnc_header = train_fnc[0]\n","    fnc_data = np.array([np.array(list(map(float, i))) for i in train_fnc[1:]])\n","    ids = np.array(fnc_data[:, 0], dtype=int)\n","\n","    with open(sbm, 'r') as f:\n","        train_sbm = list(csv.reader(f))\n","    sbm_header = train_sbm[0]\n","    sbm_data = np.array([np.array(list(map(float, i))) for i in train_sbm[1:]])\n","    fnc_data = fnc_data[:, 1:]\n","    sbm_data = sbm_data[:, 1:]\n","    data = np.column_stack((sbm_data, fnc_data))\n","\n","    if not train:\n","        return ids, data\n","\n","    with open(\"train_labels.csv\", 'r') as f:\n","        next(f)\n","        labels = np.array([int(i[1]) for i in csv.reader(f)])\n","\n","    if sbm_only:\n","        return ids, sbm_data, labels\n","    elif fnc_only:\n","        return ids, fnc_data, labels\n","    else:\n","        return ids, data, labels\n","\n","\n","def get_name(thing):\n","    if hasattr(thing, \"steps\"):\n","        return \"_\".join([i[0] for i in thing.steps])\n","    else:\n","        return thing.__repr__().split(\"(\")[0]\n","\n","\n","def write_predictions(clf):\n","    ids, data = load_data(False)\n","    preds = get_score(clf, data)\n","\n","    with open(get_name(clf) + \".csv\", 'w') as f:\n","        w = csv.writer(f)\n","        w.writerow([\"ID\", \"Probability\"])\n","        for item in zip(ids, preds):\n","            w.writerow(item)\n","\n","def get_score(clf, data):\n","    try:\n","        out = clf.decision_function(data).ravel()\n","    except AttributeError:\n","        try:\n","            out = clf.predict_proba(data)[:,1]\n","        except AttributeError:\n","            out = clf.predict(data)\n","    return out"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DMnawpQ-eaCh","colab_type":"code","colab":{}},"source":["ids, data, labels = load_data()\n","clf = svm.SVC().fit(data,labels)\n","write_predictions(clf)"],"execution_count":0,"outputs":[]}]}